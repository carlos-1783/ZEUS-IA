#!/usr/bin/env python3
"""
ZEUS-IA - Script de Migraci√≥n de Base de Datos
"""

import os
import sys
import subprocess
from pathlib import Path

# Agregar el directorio padre al path para importar m√≥dulos
sys.path.append(str(Path(__file__).parent.parent))

from app.config import settings

def run_command(command, description):
    """Ejecutar comando y mostrar resultado"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} completado")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en {description}")
        print(f"Comando: {command}")
        print(f"Error: {e.stderr}")
        return False

def check_database_connection():
    """Verificar conexi√≥n a la base de datos"""
    print("üîç Verificando conexi√≥n a la base de datos...")
    
    try:
        from app.db.session import engine
        from sqlalchemy import text
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 1"))
            print("‚úÖ Conexi√≥n a la base de datos exitosa")
            return True
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n a la base de datos: {e}")
        return False

def create_migrations():
    """Crear migraciones autom√°ticas"""
    print("üìù Creando migraciones autom√°ticas...")
    
    try:
        # Importaci√≥n din√°mica para evitar errores de linter
        import importlib
        alembic_command = importlib.import_module('alembic.command')
        alembic_config = importlib.import_module('alembic.config')
        
        cfg = alembic_config.Config('alembic.ini')
        alembic_command.revision(cfg, autogenerate=True, message='Auto migration')
        print("‚úÖ Migraciones creadas exitosamente")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  No se pudieron crear migraciones autom√°ticas: {e}")
        return False

def run_migrations():
    """Ejecutar migraciones"""
    print("üöÄ Ejecutando migraciones...")
    
    try:
        # Importaci√≥n din√°mica para evitar errores de linter
        import importlib
        alembic_command = importlib.import_module('alembic.command')
        alembic_config = importlib.import_module('alembic.config')
        
        cfg = alembic_config.Config('alembic.ini')
        alembic_command.upgrade(cfg, 'head')
        print("‚úÖ Migraciones ejecutadas exitosamente")
        return True
    except Exception as e:
        print(f"‚ùå Error ejecutando migraciones: {e}")
        return False

def create_admin_user():
    """Crear usuario administrador inicial"""
    print("üë§ Creando usuario administrador inicial...")
    
    try:
        from app.db.session import SessionLocal
        from app.models.user import User
        from app.core.security import get_password_hash
        
        db = SessionLocal()
        
        # Verificar si ya existe un admin
        admin_user = db.query(User).filter(User.email == "admin@zeusia.app").first()
        if admin_user:
            print("‚úÖ Usuario administrador ya existe")
            db.close()
            return True
        
        # Crear usuario admin
        admin_user = User(
            email="admin@zeusia.app",
            hashed_password=get_password_hash("admin123"),
            is_active=True,
            is_superuser=True,
            full_name="Administrator"
        )
        
        db.add(admin_user)
        db.commit()
        db.close()
        
        print("‚úÖ Usuario administrador creado")
        print("   Email: admin@zeusia.app")
        print("   Contrase√±a: admin123")
        print("   ‚ö†Ô∏è  CAMBIA LA CONTRASE√ëA INMEDIATAMENTE")
        return True
        
    except Exception as e:
        print(f"‚ùå Error creando usuario administrador: {e}")
        return False

def show_database_info():
    """Mostrar informaci√≥n de la base de datos"""
    print("üìä Informaci√≥n de la base de datos:")
    print(f"   URL: {settings.DATABASE_URL}")
    print(f"   Entorno: {settings.ENVIRONMENT}")
    print(f"   Debug: {settings.DEBUG}")

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando migraci√≥n de base de datos ZEUS-IA")
    print("=" * 50)
    
    # Mostrar informaci√≥n
    show_database_info()
    print()
    
    # Verificar conexi√≥n
    if not check_database_connection():
        print("‚ùå No se puede conectar a la base de datos")
        print("   Verifica la URL de conexi√≥n en las variables de entorno")
        sys.exit(1)
    
    # Crear migraciones
    if not create_migrations():
        print("‚ö†Ô∏è  No se pudieron crear migraciones autom√°ticas")
        print("   Esto es normal si no hay cambios en los modelos")
    
    # Ejecutar migraciones
    if not run_migrations():
        print("‚ùå Error ejecutando migraciones")
        sys.exit(1)
    
    # Crear usuario admin
    if not create_admin_user():
        print("‚ö†Ô∏è  No se pudo crear el usuario administrador")
        print("   Puedes crearlo manualmente m√°s tarde")
    
    print()
    print("üéâ Migraci√≥n completada exitosamente!")
    print("=" * 50)
    print("‚úÖ Base de datos configurada")
    print("‚úÖ Migraciones ejecutadas")
    print("‚úÖ Usuario administrador creado")
    print()
    print("üîê Credenciales de administrador:")
    print("   Email: admin@zeusia.app")
    print("   Contrase√±a: admin123")
    print("   ‚ö†Ô∏è  CAMBIA LA CONTRASE√ëA INMEDIATAMENTE")
    print()
    print("üöÄ Pr√≥ximos pasos:")
    print("   1. Cambia la contrase√±a del administrador")
    print("   2. Despliega el backend en Railway")
    print("   3. Despliega el frontend en Vercel")

if __name__ == "__main__":
    main()
