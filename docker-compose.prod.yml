# ===============================================
# ZEUS-IA - Docker Compose para Producción
# ===============================================

version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: zeus-db-prod
    restart: always
    environment:
      POSTGRES_DB: zeus_ia_prod
      POSTGRES_USER: zeus_user
      POSTGRES_PASSWORD: zeus_secure_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - zeus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zeus_user -d zeus_ia_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: zeus-redis-prod
    restart: always
    command: redis-server --appendonly yes --requirepass zeus_redis_password_2024
    volumes:
      - redis_prod_data:/data
    networks:
      - zeus-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend FastAPI con Gunicorn
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: zeus-backend-prod
    restart: always
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://zeus_user:zeus_secure_password_2024@db:5432/zeus_ia_prod
      - REDIS_URL=redis://:zeus_redis_password_2024@redis:6379/0
      - PYTHONUNBUFFERED=1
    env_file:
      - .env.production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - zeus-network
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/static:/app/static
      - zeus_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Frontend Vue.js (build estático)
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: zeus-frontend-prod
    restart: always
    networks:
      - zeus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    container_name: zeus-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./letsencrypt:/etc/letsencrypt:ro
      - ./backend/static:/var/www/static:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - zeus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Traefik como alternativa a Nginx (opcional)
  traefik:
    image: traefik:v3.0
    container_name: zeus-traefik-prod
    restart: always
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@zeus-ia.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--global.sendanonymoususage=false"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard de Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
      - traefik_logs:/var/log/traefik
    networks:
      - zeus-network
    profiles:
      - traefik

volumes:
  postgres_prod_data:
  redis_prod_data:
  zeus_data:
  nginx_logs:
  traefik_logs:

networks:
  zeus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
