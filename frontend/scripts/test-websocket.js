#!/usr/bin/env node

import WebSocket from 'ws';

// Test WebSocket connection
async function testWebSocketConnection() {
  console.log('üß™ Probando conexi√≥n WebSocket...');
  
  const baseUrl = 'ws://localhost:8000/api/v1/ws';
  const clientId = 'test-client-' + Date.now();
  const testUrl = `${baseUrl}/${clientId}`;
  
  console.log('URL de conexi√≥n:', testUrl);
  
  try {
    const ws = new WebSocket(testUrl);
    
    ws.on('open', () => {
      console.log('‚úÖ Conexi√≥n WebSocket establecida correctamente');
      ws.close();
    });
    
    ws.on('message', (data) => {
      console.log('üì® Mensaje recibido:', data.toString());
    });
    
    ws.on('error', (error) => {
      console.error('‚ùå Error de conexi√≥n WebSocket:', error.message);
    });
    
    ws.on('close', (code, reason) => {
      console.log(`üîå Conexi√≥n cerrada - C√≥digo: ${code}, Raz√≥n: ${reason}`);
    });
    
    // Timeout despu√©s de 5 segundos
    setTimeout(() => {
      if (ws.readyState === WebSocket.CONNECTING) {
        console.log('‚è∞ Timeout: La conexi√≥n no se estableci√≥ en 5 segundos');
        ws.close();
      }
    }, 5000);
    
  } catch (error) {
    console.error('‚ùå Error al crear conexi√≥n WebSocket:', error.message);
  }
}

// Test HTTP connection first
async function testHttpConnection() {
  console.log('üåê Probando conexi√≥n HTTP...');
  
  try {
    const response = await fetch('http://localhost:8000/api/v1/health');
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Backend HTTP funcionando:', data);
      return true;
    } else {
      console.log('‚ö†Ô∏è Backend HTTP respondi√≥ con c√≥digo:', response.status);
      return false;
    }
  } catch (error) {
    console.error('‚ùå Error de conexi√≥n HTTP:', error.message);
    return false;
  }
}

// Run tests
async function runTests() {
  console.log('üöÄ Iniciando pruebas de conectividad...\n');
  
  const httpOk = await testHttpConnection();
  
  if (httpOk) {
    console.log('\nüì° Probando WebSocket...');
    await testWebSocketConnection();
  } else {
    console.log('\n‚ùå No se puede probar WebSocket: Backend HTTP no disponible');
  }
  
  console.log('\n‚ú® Pruebas completadas');
}

runTests().catch(console.error);
