#!/bin/bash

# ===============================================
# ZEUS-IA - Script de Despliegue Local
# ===============================================

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar que Docker est√© instalado
check_docker() {
    log "Verificando instalaci√≥n de Docker..."
    if ! command -v docker &> /dev/null; then
        error "Docker no est√° instalado. Por favor instala Docker primero."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose no est√° instalado. Por favor instala Docker Compose primero."
        exit 1
    fi
    
    success "Docker y Docker Compose est√°n instalados"
}

# Verificar archivos de configuraci√≥n
check_config() {
    log "Verificando archivos de configuraci√≥n..."
    
    if [ ! -f ".env.development" ]; then
        error "Archivo .env.development no encontrado"
        exit 1
    fi
    
    if [ ! -f "docker-compose.yml" ]; then
        error "Archivo docker-compose.yml no encontrado"
        exit 1
    fi
    
    success "Archivos de configuraci√≥n encontrados"
}

# Limpiar contenedores y vol√∫menes existentes
cleanup() {
    log "Limpiando contenedores y vol√∫menes existentes..."
    
    # Detener y eliminar contenedores
    docker-compose down -v --remove-orphans
    
    # Limpiar im√°genes no utilizadas
    docker image prune -f
    
    success "Limpieza completada"
}

# Construir im√°genes
build_images() {
    log "Construyendo im√°genes Docker..."
    
    # Construir backend
    log "Construyendo backend..."
    docker-compose build backend
    
    # Construir frontend
    log "Construyendo frontend..."
    docker-compose build frontend
    
    success "Im√°genes construidas"
}

# Iniciar servicios
start_services() {
    log "Iniciando servicios..."
    
    # Iniciar servicios en background
    docker-compose up -d
    
    success "Servicios iniciados"
}

# Verificar salud de los servicios
check_health() {
    log "Verificando salud de los servicios..."
    
    # Esperar a que los servicios est√©n listos
    sleep 15
    
    # Verificar backend
    if curl -f http://localhost:8000/health > /dev/null 2>&1; then
        success "Backend est√° funcionando en http://localhost:8000"
    else
        warning "Backend no est√° respondiendo a√∫n, esperando..."
        sleep 10
        if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            success "Backend est√° funcionando en http://localhost:8000"
        else
            error "Backend no est√° respondiendo"
            return 1
        fi
    fi
    
    # Verificar frontend
    if curl -f http://localhost:5173 > /dev/null 2>&1; then
        success "Frontend est√° funcionando en http://localhost:5173"
    else
        warning "Frontend no est√° respondiendo a√∫n, esperando..."
        sleep 10
        if curl -f http://localhost:5173 > /dev/null 2>&1; then
            success "Frontend est√° funcionando en http://localhost:5173"
        else
            error "Frontend no est√° respondiendo"
            return 1
        fi
    fi
    
    success "Todos los servicios est√°n funcionando"
}

# Mostrar informaci√≥n de acceso
show_info() {
    log "Informaci√≥n de acceso:"
    echo ""
    echo -e "${GREEN}üöÄ ZEUS-IA est√° funcionando localmente:${NC}"
    echo -e "  ‚Ä¢ Frontend: ${BLUE}http://localhost:5173${NC}"
    echo -e "  ‚Ä¢ Backend API: ${BLUE}http://localhost:8000${NC}"
    echo -e "  ‚Ä¢ API Docs: ${BLUE}http://localhost:8000/docs${NC}"
    echo -e "  ‚Ä¢ WebSocket: ${BLUE}ws://localhost:8000/ws${NC}"
    echo ""
    echo -e "${YELLOW}Comandos √∫tiles:${NC}"
    echo -e "  ‚Ä¢ Ver logs: ${BLUE}docker-compose logs -f${NC}"
    echo -e "  ‚Ä¢ Detener: ${BLUE}docker-compose down${NC}"
    echo -e "  ‚Ä¢ Reiniciar: ${BLUE}docker-compose restart${NC}"
    echo ""
}

# Funci√≥n principal
main() {
    log "Iniciando despliegue local de ZEUS-IA..."
    
    check_docker
    check_config
    cleanup
    build_images
    start_services
    check_health
    show_info
    
    success "¬°Despliegue local completado exitosamente!"
}

# Ejecutar funci√≥n principal
main "$@"
